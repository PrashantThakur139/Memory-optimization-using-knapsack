#include<stdio.h>
#include<conio.h>
#include<time.h>
#include <stdlib.h>
#include <string.h>

typedef enum { NO, YES } BOOL;

int N;
int vals[100];
int wts[100];
int cap = 0;
int mval = 0;

void getWeightAndValue (BOOL incl[], int *weight, int *value) {
int i, w = 0, v = 0;
for (i = 0; i < N; ++i) {
if (incl[i]) {
w += wts[i];
v += vals[i];
}
}
*weight = w;
*value = v;
}

void printSubset (BOOL incl[]) {
int i;
int val = 0;
printf("Included = { ");
for (i = 0; i < N; ++i) {
if (incl[i]) {
printf("%d ", wts[i]);
val += vals[i];
}
}
printf("}; Total value = %d\n", val);
}

void findKnapsack (BOOL incl[], int i)
{
clock_t start, end;
     double cpu_time_used;
start = clock();
int cwt, cval;
getWeightAndValue(incl, &cwt, &cval);
if (cwt <= cap) {
if (cval > mval) {
printSubset(incl);
mval = cval;
}
}
if (i == N || cwt >= cap) {
return;
}
int x = wts[i];
BOOL use[N], nouse[N];
memcpy(use, incl, sizeof(use));
memcpy(nouse, incl, sizeof(nouse));
use[i] = YES;
nouse[i] = NO;
findKnapsack(use, i+1);
findKnapsack(nouse, i+1);

end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("Time used in branch and bound process= %f\n\n\n",cpu_time_used);
}




void Round_robin(int at[],int rt[],int n)
{clock_t start, end;int sum=0,x;
     double cpu_time_used;
start = clock();
    int remain=n,tim,time_quantum,count,flag,wait_time,turnaround_time,bt[n],i;
    for(i=0;i<n;i++)
    {
        bt[i]=rt[i];
    }
printf("Enter Time Quantum:\t");
  scanf("%d",&time_quantum);
  printf("\n\nProcess\t|Turnaround Time|Waiting Time\n\n");
  for(tim=0,count=0;remain!=0;)
  {
    if(rt[count]<=time_quantum && rt[count]>0)
    {
      tim+=rt[count];
      rt[count]=0;
      flag=1;
    }
    else if(rt[count]>0)
    {
      rt[count]-=time_quantum;
      tim+=time_quantum;
    }
    if(rt[count]==0 && flag==1)
    {
      remain--;
      printf("P[%d]\t|\t%d\t|\t%d\n",count+1,tim-at[count],tim-at[count]-bt[count]);
      wait_time+=tim-at[count]-bt[count];
      turnaround_time+=tim-at[count];
      flag=0;
    }
    if(count==n-1)
      count=0;
    else if(at[count+1]<=tim)
      count++;
    else
      count=0;
  }
  printf("\nAverage Waiting Time= %f\n",wait_time*1.0/n);
  printf("Avg Turnaround Time = %f",turnaround_time*1.0/n);
 
   end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("Time used in round robin process= %f\n\n\n",cpu_time_used);
}

void prioritysort(int pr[],int p[],int bt[],int n,int s[],int size)
{ clock_t start, end;int sum=0,x;
     double cpu_time_used;
     int i,j,temp,pos,total=0,wt[20],tat[20],o=n;
     float avg_wt,avg_tat;
   start = clock();
    //sorting burst time, priority and process number in ascending order using selection sort
    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(pr[j]<pr[pos])
                pos=j;
        }
 
        temp=pr[i];
        pr[i]=pr[pos];
        pr[pos]=temp;
 
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;
 
        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
       
        temp=s[i];
        s[i]=s[pos];
        s[pos]=temp;
       
       
    }
    i=0;x=0;
    while(sum<=size)
    {
    sum=sum+s[i];
    i++;
    x++;
    }
    n=x-1;
    wt[0]=0; //waiting time for first process is zero
 
    //calculate waiting time
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];
 
        total+=wt[i];
    }
 
    avg_wt=total/n;      //average waiting time
    total=0;
 
    printf("\nProcess\t    Burst Time    \tWaiting Time\tTurnaround Time");
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];     //calculate turnaround time
        total+=tat[i];
        printf("\nP[%d]\t\t  %d\t\t    %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
    }
 
    avg_tat=total/n;     //average turnaround time
    printf("\n%d processes out of %d were accepted in priority sort",n,o);
    printf("\n\nAverage Waiting Time=%f",avg_wt);
    printf("\nAverage Turnaround Time=%f\n",avg_tat);
    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("Time used in priority sorting process= %f\n\n\n",cpu_time_used);
   
 }
 
   
   
   
   
void simple_fill(int n, int weight[], int profit[],int W) {
    clock_t start, end;
     double cpu_time_used;
    int cur_w;
    float tot_v;
    int i,j,temp, maxi;
    int used[10];
   
    int ratio[20];
   start=clock();
     for (i = 0; i < n; i++) {
      ratio[i] = profit[i] / weight[i];
   }
 
   for (i = 0; i < n; i++) {
      for (j = i + 1; j < n; j++) {
         if (ratio[i] < ratio[j]) {
            temp = ratio[j];
            ratio[j] = ratio[i];
            ratio[i] = temp;
 
            temp = weight[j];
            weight[j] = weight[i];
            weight[i] = temp;
 
            temp = profit[j];
            profit[j] = profit[i];
            profit[i] = temp;
         }
      }
   }
 
    for (i = 0; i < n; ++i)
        used[i] = 0; /* I have not used the ith object yet */
 
    cur_w = W;
    while (cur_w > 0) { /* while there's still room*/
        /* Find the best object */
        maxi = -1;
        for (i = 0; i < n; ++i)
            if ((used[i] == 0) &&
                ((maxi == -1) || ((float)profit[i]/weight[i] > (float)profit[maxi]/weight[maxi])))
                maxi = i;
 
        used[maxi] = 1; /* mark the maxi-th object as used */
        cur_w -= weight[maxi]; /* with the object in the bag, I can carry less */
        tot_v += profit[maxi];
        if (cur_w >= 0)
            printf("Added process %d completely to the memory. Space left: %d.\n", maxi + 1,  cur_w);
        else {
            printf("Added %d%% of process %d in the memory.\n", (int)((1 + (float)cur_w/weight[maxi]) * 100), maxi + 1);
            tot_v -= profit[maxi];
            tot_v += (1 + (float)cur_w/weight[maxi]) * profit[maxi];
            end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("Time used in knapsack process= %f\n\n\n",cpu_time_used);
        }
    }
 
}


void bestfit(int n,int bt[],int s[],int size)
{
int sum=0;
clock_t start, end;
     double cpu_time_used;
     int i,j,temp,pos,total=0,wt[20],tat[20],x,o=n;
     float avg_wt,avg_tat;
   start = clock();int p[n];
   


for(int i=0;i<n;i++)
    {
        p[i]=s[i];    }
   
   
    while(sum<= size)
{
for(int i = 1; i<= n; i++){
sum = sum + p[i];
}

    //sorting process according to their size
      for(int i = 0; i<n; i++)  
    {  
        for(int j = i+1; j<n; j++)  
        {  
            if(p[j] > p[i])  
            {  
                temp = p[i];  
                p[i] = p[j];  
                p[j] = temp;  
               
            }  
        }  
    }
}
i=0;x=0;
    while(sum<=size)
    {
    sum=sum+s[i];
    i++;
    x++;
    }

 wt[0]=0; //waiting time for first process is zero
 
    //calculate waiting time
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];
 
        total+=wt[i];
    }
 
    avg_wt=total/n;      //average waiting time
    total=0;
 
    printf("\nProcess\t    Burst Time    \tWaiting Time\tTurnaround Time");
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];     //calculate turnaround time
        total+=tat[i];
        printf("\nP[%d]\t\t  %d\t\t    %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
    }
 
    avg_tat=total/n;     //average turnaround time
    printf("\n");
    printf("\n\n%d processes were accepted out of %d processes",n,o);
    printf("\n\nAverage Waiting Time=%f",avg_wt);
    printf("\nAverage Turnaround Time=%f\n",avg_tat);
   
    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("Time used in best fit process= %f\n\n\n",cpu_time_used);
   }

int main()
{
   
     
    int at[20],bt[20],weight[20],p[20],p2[20],profit[20],s[20],
    pr[20],pr2[20],i,j,n,capacity=0,temp,size,rt[20];
   printf("Enter size of memory");
   scanf("%d",&size);
    printf("Enter Total Number of Process:");
    scanf("%d",&n);
int N=n,cap=size;
    printf("\nEnter Arrival time Burst Time Priority and size\n");
    for(i=0;i<n;i++)
    {printf("Enter values for process Number %d :",i+1);
        printf("Arrival time:");
        scanf("%d",&at[i]);
rt[i]=bt[i];
        printf("Burst Time:");
        scanf("%d",&bt[i]);
        printf("Priority:");
        scanf("%d",&pr[i]);
        printf("Size:");
        scanf("%d",&s[i]);
        p[i]=i+1;           //contains process number
    }

 for (i = 0; i < n; i++)
 {    p2[i]=p[i];
      profit[i] = pr[i];
 vals[i]=pr[i];
      weight[i]=s[i];
 wts[i]=s[i];
     
   }
   
   BOOL incl[N];
for (i = 0; i < N; ++i)
{
incl[i] = NO;
}


   

   int choice;
    printf("\nSelect the approach for allocation of processes into the memory");
    printf("\n1.Best Fit.");
    printf("\n2.Priority Wise.");
    printf("\n3.Knapsack.");
    printf("\n4.Round robin\n");
printf("\n5.Knapsack b&b\n");

    scanf("\n%d",&choice);
 


    switch(choice)

    {
        case 1:  bestfit(n,bt,s,size);
        break;
        case 2: prioritysort(pr,p,bt,n,s,size);
       break;
       case 3:  simple_fill(n, weight, profit, size);
        break;
case 4: Round_robin(at,bt,n);
break;
       case 5: findKnapsack(incl, 0);
break;
        default: printf("Invalid choice!!!");
    }
    return 0;
}
